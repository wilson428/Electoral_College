(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 11.3' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[     30899,        762]
NotebookOptionsPosition[     26446,        687]
NotebookOutlinePosition[     26800,        703]
CellTagsIndexPosition[     26757,        700]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell["Apportionment Algorithms", "Title",ExpressionUUID->"a94aa734-d384-4b55-abf6-a0696c90c4ba"],

Cell["\<\
Every ten years, after the decennial Census, the U.S. reallocates the 435 \
members of Congress based on updated state populations. This has major \
implications for both legislation and presidential elections, since a state's \
electoral votes are determined the size of its delegation. Is there a better \
way?\
\>", "Subsection",ExpressionUUID->"6178ec3e-b46e-4957-a90e-725ebea4b7f2"],

Cell[CellGroupData[{

Cell["Loading the Data", "Section",ExpressionUUID->"9d27052b-bc8d-4418-a1c2-f8ef6f7f69b6"],

Cell["\<\
While Mathematica has population conveniently built in to state entities \
through the Wolfram Data Repository, let's be extra careful and use the same \
decennial Census figures the government has used for apportionment, as well \
as the official number of representatives per state allotted every tens years \
to compare to alternate methods. This data is conveniently organized on \
Census.gov and gathered in `getPopulationApportionment.nb`\
\>", "Text",ExpressionUUID->"ff020f34-73ad-4499-bf7e-3c75b0169b3c"],

Cell[BoxData[
 RowBox[{
  RowBox[{"statesByAbbreviation", " ", "=", " ", 
   RowBox[{"If", "[", 
    RowBox[{
     RowBox[{"detectEnvironment", "[", "]"}], ",", "\n", "\t", 
     RowBox[{
     "CloudGet", "[", 
      "\"\<https://www.wolframcloud.com/objects/ad3e2c70-ebd6-42c0-b038-\
60f937486a84\>\"", "]"}], ",", "\n", "\t", 
     RowBox[{"(", "\n", "\t\t", 
      RowBox[{
       RowBox[{"SetDirectory", "@", 
        RowBox[{"NotebookDirectory", "[", "]"}]}], ";", "\n", "\t\t", 
       RowBox[{
       "Import", "[", "\"\<./data/state_population_reps_evs.wl\>\"", "]"}]}], 
      "\n", "\t", ")"}]}], "\n", "]"}]}], ";"}]], "Code",ExpressionUUID->\
"2bf262a5-3f7e-4c10-8f37-38e3b7392466"],

Cell["\<\
Let's check that this loaded correctly with all the data we need\
\>", "Text",ExpressionUUID->"262ff9b9-8b90-4630-a988-f2f0499f7130"],

Cell[BoxData[
 RowBox[{"statesByAbbreviation", "[", "\"\<CA\>\"", "]"}]], "Code",
 InitializationCell->
  False,ExpressionUUID->"28efa8cc-d3ed-4e7a-be1c-a6bab4217733"],

Cell[BoxData[
 RowBox[{
  RowBox[{"stateAbbrs", " ", "=", " ", 
   RowBox[{"Keys", "@", "statesByAbbreviation"}]}], ";"}]], "Code",ExpressionU\
UID->"39577be8-db0d-4cdc-89a6-54633b04824b"]
}, Open  ]],

Cell[CellGroupData[{

Cell["How it works now: The Huntington-Hill method", "Section",ExpressionUUID->"b73fd97a-ed90-432c-aa03-bd5d578d2f3e"],

Cell["\<\
Since the 1940 Census, the United States has used the Huntington-Hill \
algorithm, known as the \"method of equal proportions,\" to divvy up the 435 \
House seats. This begins by allotting one electoral vote to each state, \
leaving 385 left. The 50 states are then allotted these remaining seats \
one-by-one according to which one has the highest priority as determined by a \
simple equation: its population divided by the square root of its current \
seats times one extra seat (the Geometric Mean): \
\>", "Text",ExpressionUUID->"1d779c54-c76a-4a69-a957-e0bd9a89751e"],

Cell["P/Sqrt[n (1+n)]", "Text",ExpressionUUID->"e649f26b-bf35-4f4b-bbb4-6914c54a4989"],

Cell["\<\
Hyperlink[\"https://en.wikipedia.org/wiki/United_States_congressional_\
apportionment#The_method_of_equal_proportions\",\"https://en.wikipedia.org/\
wiki/United_States_congressional_apportionment#The_method_of_equal_\
proportions\"]\
\>", "Text",ExpressionUUID->"02a01ddf-b7c2-47bd-b0c3-dcaddf6cd631"],

Cell["\<\
Let's make this equation a function for a given state, getting the 2010 \
decennial Census data from the data we loaded and feeding it the current \
number of allocated seats\
\>", "Text",ExpressionUUID->"f9e34095-38a9-4934-a780-dcb013ff437e"],

Cell[BoxData[
 RowBox[{
  RowBox[{"priorityHuntingtonHill", "[", 
   RowBox[{"stateAbbr_", ",", " ", "stateEVs_"}], "]"}], " ", ":=", " ", 
  RowBox[{"1.0", " ", "*", " ", 
   RowBox[{
    RowBox[{
     RowBox[{
      RowBox[{"statesByAbbreviation", "[", "stateAbbr", "]"}], "[", 
      "\"\<population_decennial\>\"", "]"}], "[", "\"\<2010\>\"", "]"}], " ", 
    "/", " ", 
    RowBox[{"Sqrt", "[", 
     RowBox[{"stateEVs", " ", "*", " ", 
      RowBox[{"(", 
       RowBox[{"stateEVs", " ", "+", " ", "1"}], ")"}]}], "]"}]}]}]}]], "Code",\
ExpressionUUID->"087600f7-9c93-439a-9057-c6773d5050b8"],

Cell["\<\
The allocation function will assign electoral votes according to the above \
formula one at a time. We're also going to explicitly pass the priority \
function in case we want to try a different one later, which we definitely \
will, and parameterize all aspects of the allocation algorithm:\
\>", "Text",ExpressionUUID->"91fef37e-13ee-4d71-9d33-6181cda44c48"],

Cell["\<\
To save time, we' re also going to store the priorities until we update the \
number of seats in a state rather than run 50 square roots 385 times.\
\>", "Text",ExpressionUUID->"b42ed573-6acc-4324-9330-3f1d772d287f"],

Cell[CellGroupData[{

Cell["\<\
total_ is the total number of seats to allocate, defaulting to 435\
\>", "Item",ExpressionUUID->"86ce69d6-c1c1-44d5-b308-d39d7186f727"],

Cell["\<\
min_ is the default number of seats that every state begins with, defaulting \
to 1\
\>", "Item",ExpressionUUID->"7f043f8b-e4ba-464d-82a9-0d10cdb197da"],

Cell["\<\
priorityFunc_ is the means of determining a state's priority, defaulting to \
the Huntington-Hill function defined above\
\>", "Item",ExpressionUUID->"27a7ff42-1437-4dcf-ab9d-0969f34737da"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{
   "We", " ", "need", " ", "a", " ", "list", " ", "of", " ", "state", " ", 
    "abbreviations", " ", "without", " ", "DC", " ", "since", " ", "it", " ", 
    "is", " ", "not", " ", "factored", " ", "into", " ", 
    RowBox[{"allocation", " ", "--"}], " ", 
    "\"\<Taxation Without Representation!\>\""}], " ", "*)"}], "\n", 
  RowBox[{
   RowBox[{
    RowBox[{"stateAbbrs50", " ", "=", " ", 
     RowBox[{"Select", "[", 
      RowBox[{"stateAbbrs", ",", " ", 
       RowBox[{
        RowBox[{"#", " ", "!=", " ", "\"\<DC\>\""}], "&"}]}], "]"}]}], ";"}], 
   "\n", "\n", 
   RowBox[{
    RowBox[{"AllocateOne", "[", 
     RowBox[{"evs_", ",", " ", "priorities_", ",", " ", 
      RowBox[{"priorityFunc_:", "priorityHuntingtonHill"}]}], "]"}], " ", ":=",
     " ", 
    RowBox[{"(", "\n", "\t", 
     RowBox[{
      RowBox[{"topPriority", " ", "=", " ", 
       RowBox[{"First", "[", 
        RowBox[{"Keys", "[", 
         RowBox[{"Reverse", "[", 
          RowBox[{"Sort", "[", "priorities", "]"}], "]"}], "]"}], "]"}]}], 
      ";", "\n", "\t", 
      RowBox[{"updatedPriorities", " ", "=", " ", "priorities"}], ";", "\n", 
      "\t", 
      RowBox[{"updatedEVs", " ", "=", " ", "evs"}], ";", "\t", "\n", "\t", 
      RowBox[{
       RowBox[{"updatedEVs", "[", "topPriority", "]"}], " ", "+=", " ", "1"}],
       ";", "\n", "\t", 
      RowBox[{
       RowBox[{"updatedPriorities", "[", "topPriority", "]"}], " ", "=", " ", 
       
       RowBox[{"priorityFunc", "[", 
        RowBox[{"topPriority", ",", " ", 
         RowBox[{"updatedEVs", "[", "topPriority", "]"}]}], "]"}]}], ";", 
      "\n", "\t", 
      RowBox[{"{", " ", 
       RowBox[{"updatedEVs", ",", " ", "updatedPriorities"}], " ", "}"}]}], 
     "\n", ")"}]}], "\n", "\n", 
   RowBox[{
    RowBox[{"calculateAllocations", "[", 
     RowBox[{
      RowBox[{"total_:", "435"}], ",", " ", 
      RowBox[{"min_:", "1"}], ",", " ", 
      RowBox[{"priorityFunc_:", "priorityHuntingtonHill"}]}], "]"}], ":=", 
    " ", 
    RowBox[{"(", "\n", "\t", 
     RowBox[{
      RowBox[{"stateEVs", " ", "=", " ", 
       RowBox[{"AssociationThread", "[", 
        RowBox[{"stateAbbrs50", ",", " ", 
         RowBox[{"ConstantArray", "[", 
          RowBox[{"min", ",", " ", "50"}], "]"}]}], "]"}]}], ";", "\n", "\t", 
      
      RowBox[{"statePriorities", " ", "=", " ", 
       RowBox[{"AssociationThread", "[", 
        RowBox[{"stateAbbrs50", ",", " ", 
         RowBox[{
          RowBox[{
           RowBox[{"priorityFunc", "[", 
            RowBox[{"#", ",", " ", "1"}], "]"}], "&"}], " ", "/@", " ", 
          "stateAbbrs50"}]}], "]"}]}], ";", "\n", "\t", 
      RowBox[{"While", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"Total", "@", "stateEVs"}], " ", "<", " ", "total"}], ",", 
        " ", 
        RowBox[{
         RowBox[{"{", " ", 
          RowBox[{"stateEVs", ",", " ", "statePriorities"}], " ", "}"}], " ", 
         "=", " ", 
         RowBox[{"AllocateOne", "[", 
          RowBox[{
          "stateEVs", ",", " ", "statePriorities", ",", " ", "priorityFunc"}],
           "]"}]}]}], "]"}], ";", "\n", "\t", 
      RowBox[{"KeySort", "@", "stateEVs"}]}], "\n", ")"}]}]}]}]], "Code",Expre\
ssionUUID->"2af2792f-4235-493c-9191-817ddf6498e6"],

Cell["Here goes nothing:", "Text",ExpressionUUID->"2b4d348c-0653-430f-86dc-7b61f535a068"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"results", " ", "=", " ", 
    RowBox[{"calculateAllocations", "[", "]"}]}], ";"}], " "}], "\n", 
 RowBox[{"{", 
  RowBox[{
   RowBox[{"results", "[", "\"\<AL\>\"", "]"}], ",", " ", 
   RowBox[{"results", "[", "\"\<KY\>\"", "]"}], ",", " ", 
   RowBox[{"results", "[", "\"\<CA\>\"", "]"}]}], "}"}], "\n", 
 RowBox[{"Total", "[", "results", "]"}]}], "Code",
 InitializationCell->
  False,ExpressionUUID->"d016ec12-bfd7-457e-a48a-6658ce2109d1"],

Cell["\<\
And let's see how it performs with a huge House of Representations\
\>", "Text",ExpressionUUID->"785e4001-241f-4f11-acad-eb18b6d15ead"],

Cell[BoxData[
 RowBox[{
  RowBox[{"bigHouse", " ", "=", " ", 
   RowBox[{"calculateAllocations", "[", "2000", "]"}]}], ";"}]], "Code",
 InitializationCell->
  False,ExpressionUUID->"1a308396-3470-4fcf-a7c5-aa26418fdeea"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Visualizing the outputs", "Section",ExpressionUUID->"a79e9998-3163-4ff4-b3b8-9078bb5ae4b2"],

Cell["\<\
Let's write a function to compare our calculated allocations to the official \
ones\
\>", "Text",ExpressionUUID->"8311d043-d541-4887-a0e9-110b8fc73de8"],

Cell[BoxData[
 RowBox[{
  RowBox[{"houseOfRepresentatives", " ", "=", " ", 
   RowBox[{"AssociationThread", "[", 
    RowBox[{"stateAbbrs50", ",", " ", 
     RowBox[{
      RowBox[{
       RowBox[{
        RowBox[{
         RowBox[{"statesByAbbreviation", "[", "#", "]"}], "[", 
         "\"\<representatives\>\"", "]"}], "[", "\"\<2010\>\"", "]"}], "&"}], 
      " ", "/@", " ", "stateAbbrs50"}]}], "]"}]}], ";"}]], "Code",ExpressionUU\
ID->"56735894-7ade-4fad-a1a6-be4f0e19141f"],

Cell[BoxData[
 RowBox[{
  RowBox[{"compareAllocations", "[", "calculatedEVs_", "]"}], " ", ":=", " ", 
  
  RowBox[{"(", "\n", "\t", 
   RowBox[{
    RowBox[{"diffs", " ", "=", " ", 
     RowBox[{"calculatedEVs", " ", "-", " ", "houseOfRepresentatives"}]}], 
    ";", "\n", "\t", "\n", "\t", 
    RowBox[{"(*", " ", "colors", " ", "*)"}], "\n", "\t", 
    RowBox[{"maxEV", " ", "=", " ", 
     RowBox[{"Max", "[", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"Max", "[", "calculatedEVs", "]"}], ",", " ", 
        RowBox[{"Max", "[", "houseOfRepresentatives", "]"}]}], "}"}], "]"}]}],
     ";", "\n", "\t", 
    RowBox[{"maxDiff", " ", "=", " ", 
     RowBox[{"Max", "[", 
      RowBox[{"Abs", " ", "/@", " ", "diffs"}], "]"}]}], ";", "\n", "\t", 
    RowBox[{"colorScaleEV", " ", "=", " ", 
     RowBox[{
      RowBox[{"ColorData", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"\"\<SiennaTones\>\"", ",", " ", "\"\<Reverse\>\""}], "}"}], 
        ",", " ", 
        RowBox[{"Rescale", "[", 
         RowBox[{"#1", ",", " ", 
          RowBox[{"{", 
           RowBox[{"0", ",", " ", 
            RowBox[{"maxEV", " ", "*", " ", "1.25"}]}], "}"}]}], "]"}]}], 
       "]"}], "&"}]}], ";", "\n", "\t", "\n", "\t", 
    RowBox[{"green", " ", "=", " ", 
     RowBox[{"RGBColor", "[", "\"\<#47C045\>\"", "]"}]}], ";", "\n", "\t", 
    RowBox[{"purple", " ", "=", " ", 
     RowBox[{"RGBColor", "[", "\"\<#E165FA\>\"", "]"}]}], ";", "\n", "\t", 
    RowBox[{"colorScaleDiff", " ", "=", " ", 
     RowBox[{"Function", "[", 
      RowBox[{"d", ",", " ", 
       RowBox[{"Blend", "[", 
        RowBox[{
         RowBox[{"Transpose", "[", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{
              RowBox[{"-", "maxDiff"}], ",", " ", "0", ",", " ", "maxDiff"}], 
             "}"}], ",", " ", 
            RowBox[{"{", " ", 
             RowBox[{"green", ",", " ", "White", ",", " ", "purple"}], " ", 
             "}"}]}], "}"}], "]"}], ",", " ", "d"}], "]"}]}], "]"}]}], ";", 
    "\n", "\n", "\t", 
    RowBox[{"(*", " ", 
     RowBox[{"cells", " ", "as", " ", "items"}], " ", "*)"}], "\n", "\t", 
    RowBox[{"header", " ", "=", " ", 
     RowBox[{
      RowBox[{
       RowBox[{"Item", "[", 
        RowBox[{"#", ",", " ", 
         RowBox[{"Alignment", " ", "->", " ", "Right"}], ",", " ", 
         RowBox[{"ItemSize", "->", 
          RowBox[{"{", 
           RowBox[{"9", ",", " ", "1.5"}], "}"}]}]}], "]"}], "&"}], " ", "/@",
       " ", 
      RowBox[{"{", " ", 
       RowBox[{
       "\"\<state\>\"", ",", " ", "\"\<actual reps\>\"", ",", " ", 
        "\"\<calculated reps\>\"", ",", " ", "\"\<difference\>\""}], " ", 
       "}"}]}]}], ";", "\n", "\t", 
    RowBox[{"houseOfRepresentativesItems", " ", "=", " ", 
     RowBox[{
      RowBox[{
       RowBox[{"Item", "[", 
        RowBox[{"#", ",", " ", 
         RowBox[{"Background", "->", 
          RowBox[{"colorScaleEV", "[", "#", "]"}]}]}], "]"}], "&"}], " ", "/@",
       " ", "houseOfRepresentatives"}]}], ";", "\n", "\t", 
    RowBox[{"calculatedEVItems", " ", "=", " ", 
     RowBox[{
      RowBox[{
       RowBox[{"Item", "[", 
        RowBox[{"#", ",", " ", 
         RowBox[{"Background", "->", 
          RowBox[{"colorScaleEV", "[", "#", "]"}]}]}], "]"}], "&"}], " ", "/@",
       " ", "calculatedEVs"}]}], ";", "\n", "\t", 
    RowBox[{"diffItems", " ", "=", " ", 
     RowBox[{
      RowBox[{
       RowBox[{"Item", "[", 
        RowBox[{"#", ",", " ", 
         RowBox[{"Background", "->", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"#", " ", "==", " ", "0"}], ",", " ", "White", ",", " ", 
            RowBox[{"colorScaleDiff", "[", "#", "]"}]}], "]"}]}], ",", " ", 
         RowBox[{"ItemSize", "->", 
          RowBox[{"{", 
           RowBox[{"2", ",", "1.5"}], "}"}]}]}], "]"}], "&"}], " ", "/@", " ",
       "diffs"}]}], ";", "\n", "\t", 
    RowBox[{"totals", " ", "=", " ", 
     RowBox[{
      RowBox[{
       RowBox[{"Item", "[", 
        RowBox[{
         RowBox[{"Style", "[", 
          RowBox[{"#", ",", " ", "Bold"}], "]"}], ",", " ", 
         RowBox[{"ItemSize", "->", 
          RowBox[{"{", 
           RowBox[{"4.8", ",", " ", "1.5"}], "}"}]}]}], "]"}], "&"}], " ", "/@",
       " ", 
      RowBox[{"{", " ", 
       RowBox[{"\"\<Total\>\"", ",", " ", 
        RowBox[{"Total", "@", "houseOfRepresentatives"}], ",", " ", 
        RowBox[{"Total", "@", "calculatedEVs"}], ",", " ", 
        RowBox[{"Total", "@", "diffs"}]}], " ", "}"}]}]}], ";", "\n", "\n", 
    "\t", 
    RowBox[{"(*", " ", 
     RowBox[{"build", " ", "rows", " ", "of", " ", "grids"}], " ", "*)"}], 
    "\n", "\t", 
    RowBox[{"columns", " ", "=", " ", 
     RowBox[{"{", " ", 
      RowBox[{
       RowBox[{"Keys", "@", "houseOfRepresentatives"}], ",", " ", 
       RowBox[{"Values", "@", "houseOfRepresentativesItems"}], ",", " ", 
       RowBox[{"Values", "@", "calculatedEVItems"}], ",", " ", 
       RowBox[{"Values", "@", "diffItems"}]}], " ", "}"}]}], ";", "\t", "\n", 
    "\t", 
    RowBox[{"parts", " ", "=", " ", 
     RowBox[{"First", "@", 
      RowBox[{"Partition", "[", 
       RowBox[{
        RowBox[{"Map", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"Append", "[", 
            RowBox[{
             RowBox[{"columns", "[", 
              RowBox[{"[", "#", "]"}], "]"}], ",", " ", 
             RowBox[{"totals", "[", 
              RowBox[{"[", "#", "]"}], "]"}]}], "]"}], "&"}], ",", " ", 
          RowBox[{"Range", "[", "4", "]"}]}], "]"}], ",", " ", 
        RowBox[{"{", " ", 
         RowBox[{"4", ",", " ", 
          RowBox[{"UpTo", "@", "13"}]}], " ", "}"}]}], "]"}]}]}], ";", "\n", 
    "\t", 
    RowBox[{"rows", " ", "=", " ", 
     RowBox[{"Map", "[", 
      RowBox[{"Flatten", ",", " ", 
       RowBox[{
        RowBox[{
         RowBox[{"Transpose", "[", 
          RowBox[{"{", " ", 
           RowBox[{"header", ",", " ", "#"}], " ", "}"}], "]"}], "&"}], " ", "/@",
         " ", "parts"}], ",", " ", 
       RowBox[{"{", "2", "}"}]}], "]"}]}], ";", "\n", "\t", 
    RowBox[{"Column", "[", 
     RowBox[{
      RowBox[{
       RowBox[{
        RowBox[{"Grid", "[", 
         RowBox[{"#", ",", " ", 
          RowBox[{"Frame", " ", "->", " ", "All"}], ",", " ", 
          RowBox[{"ItemSize", "->", "All"}]}], "]"}], "&"}], " ", "/@", " ", 
       "rows"}], ",", " ", 
      RowBox[{"Spacings", "->", "0.25"}]}], "]"}]}], "\n", ")"}]}]], "Code",Ex\
pressionUUID->"61fc4eb9-a9e8-4228-9ec9-54f3242fddee"],

Cell[BoxData[
 RowBox[{"compareAllocations", "[", "results", "]"}]], "Code",
 InitializationCell->
  False,ExpressionUUID->"b3993721-91f1-49b6-8877-84d05a27addf"],

Cell["\<\
Our function worked perfectly. Let's compare reality to our \"Big House\"\
\>", "Text",ExpressionUUID->"ece454ab-8fdd-4b5a-b777-163e236773d1"],

Cell[BoxData[
 RowBox[{"compareAllocations", "[", "bigHouse", "]"}]], "Code",
 InitializationCell->
  False,ExpressionUUID->"5f6499bc-27dd-4e2f-b76f-2debbe23242f"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Analyzing the results", "Section",ExpressionUUID->"012b4c10-7c20-4b7a-b0f0-3e88001d0b9f"],

Cell["\<\
One way to measure the effectiveness of allocation is by measuring the ratio \
of the population to its number of representatives. We have the population \
conveniently baked in to the state data\
\>", "Text",ExpressionUUID->"7d3a1c29-e5c0-4d9b-90d5-e488e3de4f6d"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"statePopulations", " ", "=", " ", 
   RowBox[{"AssociationThread", "[", 
    RowBox[{"stateAbbrs50", ",", " ", 
     RowBox[{
      RowBox[{
       RowBox[{
        RowBox[{
         RowBox[{"statesByAbbreviation", "[", "#", "]"}], "[", 
         "\"\<population_decennial\>\"", "]"}], "[", "\"\<2010\>\"", "]"}], 
       "&"}], " ", "/@", " ", "stateAbbrs50"}]}], "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"totalUSPopulation", " ", "=", " ", "308745538"}], ";", " ", 
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{"https", ":"}], "//", 
    RowBox[{
     RowBox[{
      RowBox[{
       RowBox[{
        RowBox[{
         RowBox[{
          RowBox[{"www", ".", "census", ".", "gov"}], "/", "data"}], "/", 
         "tables"}], "/", "2010"}], "/", "dec"}], "/", "popchange"}], "-", 
     "data", "-", 
     RowBox[{"text", ".", "html"}]}]}], " ", "*)"}]}]}], "Code",ExpressionUUID\
->"da3b6dc3-9eff-4f11-8eea-148857aee3f8"],

Cell[BoxData[
 RowBox[{
  RowBox[{"peoplePerRepresentative", "[", "allocation_", "]"}], " ", ":=", 
  " ", 
  RowBox[{"(", "\n", "\t", 
   RowBox[{"perRep", " ", "=", " ", 
    RowBox[{"AssociationThread", "[", 
     RowBox[{"stateAbbrs50", ",", " ", 
      RowBox[{
       RowBox[{
        RowBox[{"Round", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"statePopulations", "[", "#", "]"}], " ", "/", " ", 
           RowBox[{"allocation", "[", "#", "]"}]}], " ", "*", " ", "1.0"}], 
         "]"}], "&"}], " ", "/@", " ", "stateAbbrs50"}]}], "]"}]}], "\n", 
   ")"}]}]], "Code",ExpressionUUID->"f8735a79-8207-4cdd-bee6-b86dc1e42209"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"houseRatio", " ", "=", " ", 
   RowBox[{"peoplePerRepresentative", "[", "houseOfRepresentatives", "]"}]}], 
  ";"}], "\n", 
 RowBox[{
  RowBox[{"bigHouseRatio", " ", "=", " ", 
   RowBox[{"peoplePerRepresentative", "[", "bigHouse", "]"}]}], 
  ";"}]}], "Code",
 InitializationCell->
  False,ExpressionUUID->"6054043a-2693-4459-8050-f03299bc55a4"],

Cell["\<\
Let's visualize the distribution of these ratios and use the standard \
deviation as a barometer\
\>", "Text",ExpressionUUID->"e45fd0c9-7bdf-49d5-9ed2-18a02fa6f2d3"],

Cell[BoxData[
 RowBox[{
  RowBox[{"visualizeRatio", "[", "allocation_", "]"}], " ", ":=", " ", 
  RowBox[{"(", "\n", "\t", 
   RowBox[{
    RowBox[{"ratio", " ", "=", " ", 
     RowBox[{"peoplePerRepresentative", "[", "allocation", "]"}]}], ";", "\n",
     "\t", 
    RowBox[{"total", " ", "=", " ", 
     RowBox[{"Total", "@", "allocation"}]}], ";", "\n", "\t", 
    RowBox[{"ideal", " ", "=", " ", 
     RowBox[{"Round", "[", 
      RowBox[{"totalUSPopulation", " ", "/", " ", "total"}], "]"}]}], ";", 
    "\n", "\t", 
    RowBox[{"ratioWithUS", " ", "=", " ", 
     RowBox[{"Append", "[", 
      RowBox[{"ratio", ",", " ", 
       RowBox[{"\"\<US\>\"", " ", "->", " ", "ideal"}]}], "]"}]}], ";", "\n", 
    "\t", 
    RowBox[{"sd", " ", "=", " ", 
     RowBox[{
      RowBox[{"StandardDeviation", "[", "ratio", "]"}], " ", "*", " ", 
      "1.0"}]}], ";", "\n", "\t", 
    RowBox[{"cov", " ", "=", " ", 
     RowBox[{"sd", " ", "/", " ", 
      RowBox[{"Mean", "@", "ratio"}]}]}], ";", "\n", "\t", 
    RowBox[{"sdPrint", " ", "=", " ", 
     RowBox[{"NumberForm", "[", 
      RowBox[{
       RowBox[{"Round", "[", "sd", "]"}], ",", " ", 
       RowBox[{"DigitBlock", "->", "3"}]}], "]"}]}], ";", "\n", "\t", "\n", 
    "\t", 
    RowBox[{"colorScale", " ", "=", " ", 
     RowBox[{
      RowBox[{"ColorData", "[", 
       RowBox[{"\"\<Rainbow\>\"", ",", " ", 
        RowBox[{"Rescale", "[", 
         RowBox[{"#1", ",", " ", 
          RowBox[{"MinMax", "@", "ratio"}]}], "]"}]}], "]"}], "&"}]}], ";", 
    "\n", "\t", 
    RowBox[{"colorFunction", " ", "=", " ", 
     RowBox[{"Function", "[", 
      RowBox[{"v", ",", " ", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"v", " ", "==", " ", "ideal"}], ",", " ", "Yellow", ",", " ", 
         RowBox[{"colorScale", "[", "v", "]"}]}], "]"}]}], "]"}]}], ";", "\n",
     "\n", "\t", 
    RowBox[{"sorted", " ", "=", " ", 
     RowBox[{"Sort", "@", "ratioWithUS"}]}], ";", "\n", "\t", 
    RowBox[{"labels", " ", "=", " ", 
     RowBox[{
      RowBox[{
       RowBox[{"Style", "[", 
        RowBox[{"#", ",", " ", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"#", " ", "==", " ", "\"\<US\>\""}], ",", " ", "Bold", ",",
            " ", "Plain"}], "]"}], ",", " ", 
         RowBox[{"FontSize", "->", "8"}]}], "]"}], "&"}], " ", "/@", " ", 
      RowBox[{"Keys", "@", "sorted"}]}]}], ";", "\n", "\t", "\n", "\t", 
    RowBox[{"BarChart", "[", 
     RowBox[{"sorted", ",", "\n", "\t\t", 
      RowBox[{"ChartLabels", "->", "labels"}], ",", " ", 
      RowBox[{"GridLines", "->", "Automatic"}], ",", " ", 
      RowBox[{"ImageSize", "->", 
       RowBox[{"{", 
        RowBox[{"800", ",", " ", "Automatic"}], "}"}]}], ",", " ", 
      RowBox[{"AspectRatio", "->", 
       RowBox[{"1", "/", "4"}]}], ",", "\n", "\t\t", 
      RowBox[{"PlotRangePadding", " ", "->", " ", 
       RowBox[{"{", " ", 
        RowBox[{
         RowBox[{"-", "1"}], ",", " ", "0"}], " ", "}"}]}], ",", " ", 
      RowBox[{"PlotRange", "->", 
       RowBox[{"{", " ", 
        RowBox[{"Automatic", ",", " ", 
         RowBox[{
          RowBox[{"Max", "[", "sorted", "]"}], " ", "*", " ", "1.1"}]}], " ", 
        "}"}]}], ",", " ", 
      RowBox[{"ChartStyle", "->", "Purple"}], ",", "\n", "\t\t", 
      RowBox[{"ColorFunctionScaling", " ", "->", " ", "False"}], ",", "\n", 
      "\t\t", 
      RowBox[{"ColorFunction", "->", "colorFunction"}], ",", "\n", "\t\t", 
      RowBox[{"PlotLabel", "->", " ", 
       RowBox[{"Column", "[", 
        RowBox[{
         RowBox[{"{", "\n", "\t\t\t", 
          RowBox[{
           RowBox[{"Style", "[", 
            RowBox[{
             RowBox[{
              RowBox[{"ToString", "@", "total"}], " ", "<>", " ", 
              "\"\< Seats\>\""}], ",", " ", 
             RowBox[{"FontSize", "->", "20"}]}], "]"}], ",", "\n", "\t\t\t", 
           RowBox[{"Style", "[", 
            RowBox[{
             RowBox[{"\"\<Target: \>\"", " ", "<>", " ", 
              RowBox[{"ToString", "@", 
               RowBox[{"NumberForm", "[", 
                RowBox[{"ideal", ",", " ", 
                 RowBox[{"DigitBlock", " ", "->", " ", "3"}]}], "]"}]}], " ", 
              "<>", " ", "\"\< people per representative\>\""}], ",", " ", 
             RowBox[{"FontSize", "->", "14"}]}], "]"}], ",", "\n", "\t\t\t", 
           RowBox[{"Style", "[", 
            RowBox[{
             RowBox[{"\"\<Standard Deviation: \>\"", " ", "<>", " ", 
              RowBox[{"ToString", "[", "sdPrint", "]"}]}], ",", " ", 
             RowBox[{"FontSize", "->", "14"}]}], "]"}], ",", "\n", "\t\t\t", 
           RowBox[{"Style", "[", 
            RowBox[{
             RowBox[{"\"\<Coefficient of Variation: \>\"", " ", "<>", " ", 
              RowBox[{"ToString", "@", "cov"}]}], ",", " ", 
             RowBox[{"FontSize", "->", "14"}]}], "]"}]}], "\n", "\t\t", "}"}],
          ",", " ", 
         RowBox[{"Alignment", "->", "Center"}]}], "]"}]}]}], "\n", "\t", 
     "]"}]}], "\n", ")"}]}]], "Code",ExpressionUUID->"22bc41a3-c62a-47a8-a420-\
273af5bb8be6"],

Cell[BoxData[{
 RowBox[{"visualizeRatio", "[", 
  RowBox[{"houseOfRepresentatives", ",", " ", "houseRatio"}], "]"}], "\n", 
 RowBox[{"visualizeRatio", "[", 
  RowBox[{"bigHouse", ",", " ", "bigHouseRatio"}], "]"}]}], "Code",
 InitializationCell->
  False,ExpressionUUID->"78c8413b-60b6-4338-b185-de58f6748281"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Wrapping up", "Section",ExpressionUUID->"42de6225-d550-43aa-9e62-eaa4454dd91f"],

Cell["\<\
We now have all the tools we need to play with different ways to configure \
the House. We'll import this Notebook into a playpen and get started.\
\>", "Text",ExpressionUUID->"375f3c8e-4bad-40e0-b226-ce35705bf9fb"]
}, Open  ]]
}, Open  ]]
},
WindowSize->{808, 751},
WindowMargins->{{20, Automatic}, {Automatic, 44}},
FrontEndVersion->"11.3 for Mac OS X x86 (32-bit, 64-bit Kernel) (March 5, \
2018)",
StyleDefinitions->"Default.nb"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[580, 22, 96, 0, 98, "Title",ExpressionUUID->"a94aa734-d384-4b55-abf6-a0696c90c4ba"],
Cell[679, 24, 397, 6, 135, "Subsection",ExpressionUUID->"6178ec3e-b46e-4957-a90e-725ebea4b7f2"],
Cell[CellGroupData[{
Cell[1101, 34, 90, 0, 53, "Section",ExpressionUUID->"9d27052b-bc8d-4418-a1c2-f8ef6f7f69b6"],
Cell[1194, 36, 523, 7, 127, "Text",ExpressionUUID->"ff020f34-73ad-4499-bf7e-3c75b0169b3c"],
Cell[1720, 45, 694, 17, 167, "Code",ExpressionUUID->"2bf262a5-3f7e-4c10-8f37-38e3b7392466"],
Cell[2417, 64, 143, 2, 35, "Text",ExpressionUUID->"262ff9b9-8b90-4630-a988-f2f0499f7130"],
Cell[2563, 68, 167, 3, 36, "Code",ExpressionUUID->"28efa8cc-d3ed-4e7a-be1c-a6bab4217733",
 InitializationCell->False],
Cell[2733, 73, 188, 4, 52, "Code",ExpressionUUID->"39577be8-db0d-4cdc-89a6-54633b04824b"]
}, Open  ]],
Cell[CellGroupData[{
Cell[2958, 82, 118, 0, 67, "Section",ExpressionUUID->"b73fd97a-ed90-432c-aa03-bd5d578d2f3e"],
Cell[3079, 84, 583, 8, 127, "Text",ExpressionUUID->"1d779c54-c76a-4a69-a957-e0bd9a89751e"],
Cell[3665, 94, 86, 0, 35, "Text",ExpressionUUID->"e649f26b-bf35-4f4b-bbb4-6914c54a4989"],
Cell[3754, 96, 311, 5, 81, "Text",ExpressionUUID->"02a01ddf-b7c2-47bd-b0c3-dcaddf6cd631"],
Cell[4068, 103, 253, 4, 58, "Text",ExpressionUUID->"f9e34095-38a9-4934-a780-dcb013ff437e"],
Cell[4324, 109, 598, 15, 52, "Code",ExpressionUUID->"087600f7-9c93-439a-9057-c6773d5050b8"],
Cell[4925, 126, 370, 5, 81, "Text",ExpressionUUID->"91fef37e-13ee-4d71-9d33-6181cda44c48"],
Cell[5298, 133, 226, 3, 58, "Text",ExpressionUUID->"b42ed573-6acc-4324-9330-3f1d772d287f"],
Cell[CellGroupData[{
Cell[5549, 140, 145, 2, 32, "Item",ExpressionUUID->"86ce69d6-c1c1-44d5-b308-d39d7186f727"],
Cell[5697, 144, 162, 3, 32, "Item",ExpressionUUID->"7f043f8b-e4ba-464d-82a9-0d10cdb197da"],
Cell[5862, 149, 199, 3, 53, "Item",ExpressionUUID->"27a7ff42-1437-4dcf-ab9d-0969f34737da"]
}, Open  ]],
Cell[6076, 155, 3293, 83, 376, "Code",ExpressionUUID->"2af2792f-4235-493c-9191-817ddf6498e6"],
Cell[9372, 240, 89, 0, 35, "Text",ExpressionUUID->"2b4d348c-0653-430f-86dc-7b61f535a068"],
Cell[9464, 242, 489, 12, 75, "Code",ExpressionUUID->"d016ec12-bfd7-457e-a48a-6658ce2109d1",
 InitializationCell->False],
Cell[9956, 256, 145, 2, 35, "Text",ExpressionUUID->"785e4001-241f-4f11-acad-eb18b6d15ead"],
Cell[10104, 260, 220, 5, 36, "Code",ExpressionUUID->"1a308396-3470-4fcf-a7c5-aa26418fdeea",
 InitializationCell->False]
}, Open  ]],
Cell[CellGroupData[{
Cell[10361, 270, 97, 0, 67, "Section",ExpressionUUID->"a79e9998-3163-4ff4-b3b8-9078bb5ae4b2"],
Cell[10461, 272, 162, 3, 35, "Text",ExpressionUUID->"8311d043-d541-4887-a0e9-110b8fc73de8"],
Cell[10626, 277, 481, 12, 52, "Code",ExpressionUUID->"56735894-7ade-4fad-a1a6-be4f0e19141f"],
Cell[11110, 291, 6520, 166, 509, "Code",ExpressionUUID->"61fc4eb9-a9e8-4228-9ec9-54f3242fddee"],
Cell[17633, 459, 162, 3, 36, "Code",ExpressionUUID->"b3993721-91f1-49b6-8877-84d05a27addf",
 InitializationCell->False],
Cell[17798, 464, 152, 2, 35, "Text",ExpressionUUID->"ece454ab-8fdd-4b5a-b777-163e236773d1"],
Cell[17953, 468, 163, 3, 36, "Code",ExpressionUUID->"5f6499bc-27dd-4e2f-b76f-2debbe23242f",
 InitializationCell->False]
}, Open  ]],
Cell[CellGroupData[{
Cell[18153, 476, 95, 0, 67, "Section",ExpressionUUID->"012b4c10-7c20-4b7a-b0f0-3e88001d0b9f"],
Cell[18251, 478, 274, 4, 58, "Text",ExpressionUUID->"7d3a1c29-e5c0-4d9b-90d5-e488e3de4f6d"],
Cell[18528, 484, 959, 27, 72, "Code",ExpressionUUID->"da3b6dc3-9eff-4f11-8eea-148857aee3f8"],
Cell[19490, 513, 650, 16, 91, "Code",ExpressionUUID->"f8735a79-8207-4cdd-bee6-b86dc1e42209"],
Cell[20143, 531, 382, 10, 56, "Code",ExpressionUUID->"6054043a-2693-4459-8050-f03299bc55a4",
 InitializationCell->False],
Cell[20528, 543, 175, 3, 35, "Text",ExpressionUUID->"e45fd0c9-7bdf-49d5-9ed2-18a02fa6f2d3"],
Cell[20706, 548, 5049, 117, 566, "Code",ExpressionUUID->"22bc41a3-c62a-47a8-a420-273af5bb8be6"],
Cell[25758, 667, 310, 6, 56, "Code",ExpressionUUID->"78c8413b-60b6-4338-b185-de58f6748281",
 InitializationCell->False]
}, Open  ]],
Cell[CellGroupData[{
Cell[26105, 678, 85, 0, 67, "Section",ExpressionUUID->"42de6225-d550-43aa-9e62-eaa4454dd91f"],
Cell[26193, 680, 225, 3, 58, "Text",ExpressionUUID->"375f3c8e-4bad-40e0-b226-ce35705bf9fb"]
}, Open  ]]
}, Open  ]]
}
]
*)

(* End of internal cache information *)

