(* ::Package:: *)

(************************************************************************)
(* This file was generated automatically by the Mathematica front end.  *)
(* It contains Initialization cells from a Notebook file, which         *)
(* typically will have the same name as this file except ending in      *)
(* ".nb" instead of ".m".                                               *)
(*                                                                      *)
(* This file is intended to be loaded into the Mathematica kernel using *)
(* the package loading commands Get or Needs.  Doing so is equivalent   *)
(* to using the Evaluate Initialization Cells menu command in the front *)
(* end.                                                                 *)
(*                                                                      *)
(* DO NOT EDIT THIS FILE.  This entire file is regenerated              *)
(* automatically each time the parent Notebook file is saved in the     *)
(* Mathematica front end.  Any changes you make to this file will be    *)
(* overwritten.                                                         *)
(************************************************************************)



Clear["Global`*"];
SetDirectory@NotebookDirectory[];
SetOptions[Notebooks["apportionment.nb"][[1]],AutoGeneratedPackage->Automatic]


statesByAbbreviation = CloudGet["https://www.wolframcloud.com/objects/1a4bfb31-d5d4-49e3-9e04-4cf80e1fae1b"];
(* statesByAbbreviation = Import["./data/state_population_reps_evs.wl"]; *)


stateAbbrs = Keys@statesByAbbreviation;


priorityHuntingtonHill[stateAbbr_, stateEVs_] := 
	1.0 * statesByAbbreviation[stateAbbr]["population_decennial"]["2010"] / 
	Sqrt[stateEVs * (stateEVs + 1)]


(* We need a list of state abbreviations without DC since it is not factored into allocation -- "Taxation Without Representation!" *)
stateAbbrs50 = Select[stateAbbrs, # != "DC"&];

AllocateOne[evs_, priorities_, priorityFunc_:priorityHuntingtonHill] := (
	topPriority = First[Keys[Reverse[Sort[priorities]]]];
	updatedPriorities = priorities;
	updatedEVs = evs;	
	updatedEVs[topPriority] += 1;
	updatedPriorities[topPriority] = priorityFunc[topPriority, updatedEVs[topPriority]];
	{ updatedEVs, updatedPriorities }
);

calculateAllocations[total_:435, min_:1, priorityFunc_:priorityHuntingtonHill]:= (
	stateEVs = AssociationThread[stateAbbrs50, ConstantArray[min, 50]];
	statePriorities = AssociationThread[stateAbbrs50, priorityFunc[#, 1]& /@ stateAbbrs50];
	While[Total@stateEVs < total, { stateEVs, statePriorities } = AllocateOne[stateEVs, statePriorities, priorityFunc]];
	KeySort@stateEVs
);


houseOfRepresentatives = AssociationThread[
	stateAbbrs50,
	statesByAbbreviation[#]["representatives"]["2010"]& /@ stateAbbrs50
];


compareAllocations[calculatedEVs_] := (
	diffs = calculatedEVs - houseOfRepresentatives;
	
	(* colors *)
	maxEV = Max[{Max[calculatedEVs], Max[houseOfRepresentatives]}];
	maxDiff = Max[Abs /@ diffs];
	colorScaleEV = ColorData[{"SiennaTones", "Reverse"}, Rescale[#1, {0, maxEV * 1.25}]]&;
	
	green = RGBColor["#47C045"];
	purple = RGBColor["#E165FA"];
	colorScaleDiff = Function[d, Blend[Transpose[{{-maxDiff, 0, maxDiff}, { green, White, purple }}], d]];

	(* cells as items *)
	header = Item[#, Alignment -> Right, ItemSize->{9, 1.5}]& /@ { "state", "actual reps", "calculated reps", "difference" };
	houseOfRepresentativesItems = Item[#, Background->colorScaleEV[#]]& /@ houseOfRepresentatives;
	calculatedEVItems = Item[#, Background->colorScaleEV[#]]& /@ calculatedEVs;
	diffItems = Item[#, Background->If[# == 0, White, colorScaleDiff[#]], ItemSize->{2,1.5}]& /@ diffs;
	totals = Item[Style[#, Bold], ItemSize->{4.8, 1.5}]& /@ { "Total", Total@houseOfRepresentatives, Total@calculatedEVs, Total@diffs };

	(* build rows of grids *)
	columns = { Keys@houseOfRepresentatives, Values@houseOfRepresentativesItems, Values@calculatedEVItems, Values@diffItems };	
	parts = First@Partition[Map[Append[columns[[#]], totals[[#]]]&, Range[4]], { 4, UpTo@13 }];
	rows = Map[Flatten, Transpose[{ header, # }]& /@ parts, {2}];
	Column[Grid[#, Frame -> All, ItemSize->All]& /@ rows, Spacings->0.25]
)


statePopulations = AssociationThread[
	stateAbbrs50,
	statesByAbbreviation[#]["population_decennial"]["2010"]& /@ stateAbbrs50
];
totalUSPopulation = 308745538; (* https://www.census.gov/data/tables/2010/dec/popchange-data-text.html *)


peoplePerRepresentative[allocation_] := (
	perRep = AssociationThread[
		stateAbbrs50,
		Round[statePopulations[#] / allocation[#] * 1.0]& /@ stateAbbrs50
	]
)


visualizeRatio[allocation_] := (
	ratio = peoplePerRepresentative[allocation];
	total = Total@allocation;
	ideal = Round[totalUSPopulation / total];
	ratioWithUS = Append[ratio, "US" -> ideal];
	sd = StandardDeviation[ratio] * 1.0;
	cov = sd / Mean@ratio;
	sdPrint = NumberForm[Round[sd], DigitBlock->3];

	colorScale = ColorData["Rainbow", Rescale[#1, MinMax@ratio]]&;
	colorFunction = Function[v, If[v == ideal, Yellow, colorScale[v]]];

	sorted = Sort@ratioWithUS;
	allocationsWithUS = Append[allocation, "US" -> "NA"];
	
	labels = Placed[Style[Rotate[# <> ": " <> ToString@allocationsWithUS[#], Pi/2],
		If[# == "US", Bold, Plain], FontSize->8, If[# == "US", Black, White]]& /@ Keys@sorted, Top];
			
	BarChart[sorted,
		ChartLabels->labels, GridLines->Automatic, ImageSize->{800, Automatic}, AspectRatio->1/4,
		PlotRangePadding -> { -1, 0 }, PlotRange->{ Automatic, Max[sorted] * 1.1 }, ChartStyle->Purple,
		ColorFunctionScaling -> False,
		ColorFunction->colorFunction,
		PlotLabel-> Column[{
			Style[ToString@total <> " Seats", FontSize->20],
			Style["Target: " <> ToString@NumberForm[ideal, DigitBlock -> 3] <> " people per representative", FontSize->14],
			Style["Standard Deviation: " <> ToString[sdPrint], FontSize->14],
			Style["Coefficient of Variation: " <> ToString@cov, FontSize->14]
		}, Alignment->Center],
		BarSpacing->None
	]
)



